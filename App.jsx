import React, { useMemo, useState } from "react";

const Card = ({ children, className = "" }) => (
  <div className={`rounded-2xl shadow-lg p-5 bg-white ${className}`}>{children}</div>
);
const Button = ({ children, onClick, className = "", type = "button" }) => (
  <button
    type={type}
    onClick={onClick}
    className={`px-4 py-3 rounded-2xl shadow hover:shadow-md active:scale-[0.99] transition w-full text-center ${className}`}
  >
    {children}
  </button>
);
const Chip = ({ children }) => (
  <span className="inline-block rounded-full px-3 py-1 text-sm bg-gray-100">{children}</span>
);

export default function FitnessLearningApp() {
  const [studentName, setStudentName] = useState("");
  const [page, setPage] = useState("start");
  const [stack, setStack] = useState([]);

  function go(next) { setStack((s) => [...s, page]); setPage(next); }
  function back() { setStack((s) => { const last = s[s.length - 1]; if (!last) return s; setPage(last); return s.slice(0, -1); }); }
  function home() { setPage("home"); setStack([]); }

  return (
    <div className="container">
      <Header onBack={page !== "start" ? back : null} onHome={page !== "start" ? home : null} />

      {page === "start" && (
        <StartScreen studentName={studentName} setStudentName={setStudentName} onStart={() => go("home")} />
      )}
      {page === "home" && <Home go={go} />}
      {page === "info" && <InfoPage />}
      {page === "pretest" && <QuizPage key="pre" title="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" onDone={() => go("clips")} />}
      {page === "posttest" && <QuizPage key="post" title="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" onDone={() => go("summary")} />}
      {page === "clips" && <ClipsPage openClip={() => go("clip-detail")} />}
      {page === "clip-detail" && <ClipDetailPage onNext={() => go("tips")} />}
      {page === "tips" && <TipsPage onNext={() => go("posttest")} />}
      {page === "survey" && <SurveyPage studentName={studentName} />}
      {page === "summary" && <SummaryPage go={go} />}

      <FooterNav showBack={page !== "start"} onBack={back} onHome={page !== "start" ? home : null} />
    </div>
  );
}

const Header = ({ onBack, onHome }) => (
  <div className="flex items-center justify-between mb-6">
    <div className="w-12">
      {onBack ? (<button onClick={onBack} className="text-xl">‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>) : (<span />)}
    </div>
    <h1 className="text-2xl font-bold">‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</h1>
    <div className="w-12 text-right">{onHome && (<button onClick={onHome} className="text-xl">üè†</button>)}</div>
  </div>
);

const FooterNav = ({ showBack, onBack, onHome }) => (
  <div className="mt-6 flex items-center justify-between text-sm text-gray-500">
    <div>{showBack && <button onClick={onBack}>‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>}</div>
    <div>{onHome && <button onClick={onHome}>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</button>}</div>
  </div>
);

function StartScreen({ studentName, setStudentName, onStart }) {
  return (
    <Card className="bg-white/90">
      <div className="space-y-4">
        <div className="text-center">
          <div className="text-3xl font-extrabold">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô: ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á</div>
          <div className="mt-2 text-gray-600">‡∏ó‡∏≥‡πÇ‡∏î‡∏¢ ‡∏•‡πà‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏Å‡πá‡πÄ‡∏¢‡∏≠‡∏∞‡∏ô‡∏∞</div>
        </div>
        <div className="grid gap-2">
          <label className="text-sm text-gray-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
          <input
            value={studentName}
            onChange={(e) => setStudentName(e.target.value)}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ô‡∏™‡∏ß‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
            className="w-full rounded-xl border px-4 py-3"
          />
        </div>
        <Button onClick={onStart} className="bg-indigo-600 text-white font-semibold">START</Button>
      </div>
    </Card>
  );
}

function Home({ go }) {
  const menus = [
    { key: "pretest", label: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" },
    { key: "info", label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ" },
    { key: "clips", label: "‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á" },
    { key: "survey", label: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à" },
  ];
  return (
    <div className="space-y-4">
      {menus.map((m) => (
        <Button key={m.key} onClick={() => go(m.key)} className="bg-white">{m.label}</Button>
      ))}
      <div className="text-right text-gray-500">‚Üí ‡πÑ‡∏õ‡∏ï‡πà‡∏≠</div>
    </div>
  );
}

function InfoPage() {
  const sections = [
    { title: "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", body: "‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏±‡πà‡∏á‡∏ô‡∏≤‡∏ô ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ß‡∏¥‡∏ò‡∏µ" },
    { title: "‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", body: "‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡∏î‡∏•‡∏á ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á ‡∏†‡∏≤‡∏û‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏•‡∏î‡∏•‡∏á" },
    { title: "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î", body: "‡∏ß‡∏±‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‚Äì‡∏ß‡∏±‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏Ñ‡∏≠ ‡∏ö‡πà‡∏≤ ‡∏´‡∏•‡∏±‡∏á ‡∏à‡∏≤‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏±‡πà‡∏á‡∏à‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô" },
    { title: "‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", body: "‡∏´‡∏•‡∏±‡∏Å 3 ‡∏Ç‡πâ‡∏≠: (1) ‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ó‡∏∏‡∏Å 45‚Äì60 ‡∏ô‡∏≤‡∏ó‡∏µ (2) ‡∏ù‡∏∂‡∏Å‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏™‡∏∞‡∏ö‡∏±‡∏Å/‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏á ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏ß‡∏±‡∏ô (3) ‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏≠" },
  ];
  return (
    <div className="space-y-4">
      {sections.map((s) => (
        <Card key={s.title}>
          <h3 className="font-semibold text-lg mb-2">{s.title}</h3>
          <p className="text-gray-700">{s.body}</p>
        </Card>
      ))}
    </div>
  );
}

function QuizPage({ title, onDone }) {
  const QUESTIONS = useMemo(() => [
    { q: "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô/‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ñ‡∏ß‡∏£‡∏•‡∏∏‡∏Å‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î?", choices: ["120 ‡∏ô‡∏≤‡∏ó‡∏µ", "45‚Äì60 ‡∏ô‡∏≤‡∏ó‡∏µ", "15 ‡∏ô‡∏≤‡∏ó‡∏µ"], a: 1 },
    { q: "‡∏ó‡πà‡∏≤ Plank ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å?", choices: ["‡∏ï‡πâ‡∏ô‡∏Ç‡∏≤", "‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏•‡∏≥‡∏ï‡∏±‡∏ß", "‡∏õ‡∏•‡∏≤‡∏¢‡πÅ‡∏Ç‡∏ô"], a: 1 },
    { q: "‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á ‡∏Ñ‡∏ß‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?", choices: ["‡∏Å‡∏•‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à", "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠", "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"], a: 1 },
    { q: "‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ß/‡∏ú‡∏î‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏Ç‡∏ì‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?", choices: ["‡πÉ‡∏™‡πà‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ô‡πÉ‡∏à", "‡∏ó‡∏≤‡∏¢‡∏≤‡∏´‡∏ô‡∏≤ ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á"], a: 0 },
    { q: "‡∏Å‡∏≤‡∏£‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‚Ä¶", choices: ["1 ‡∏ô‡∏≤‡∏ó‡∏µ", "5‚Äì10 ‡∏ô‡∏≤‡∏ó‡∏µ", "30 ‡∏ô‡∏≤‡∏ó‡∏µ"], a: 1 },
    { q: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πà‡∏≠‡∏°‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", choices: ["2‚Äì5 ‡∏Å‡∏£‡∏±‡∏°", "20‚Äì30 ‡∏Å‡∏£‡∏±‡∏°", "100 ‡∏Å‡∏£‡∏±‡∏°"], a: 1 },
    { q: "‡∏´‡∏≤‡∏Å‡∏õ‡∏ß‡∏î‡πÅ‡∏´‡∏•‡∏°‡∏Ñ‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ù‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏£‚Ä¶", choices: ["‡∏ù‡∏∑‡∏ô‡∏ï‡πà‡∏≠", "‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡πà‡∏≤/‡∏û‡∏±‡∏Å", "‡∏Å‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô"], a: 1 },
    { q: "‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢", choices: ["4 ‡∏ä‡∏°.", "6 ‡∏ä‡∏°.", "7‚Äì9 ‡∏ä‡∏°."], a: 2 },
  ], []);

  const [ans, setAns] = useState(Array(QUESTIONS.length).fill(null));
  const [done, setDone] = useState(false);
  const correct = ans.filter((v, i) => v === QUESTIONS[i].a).length;

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-bold">{title}</h2>
      {QUESTIONS.map((item, idx) => (
        <Card key={idx}>
          <p className="font-medium mb-3">{idx + 1}. {item.q}</p>
          <div className="grid gap-2">
            {item.choices.map((c, ci) => (
              <label key={ci} className="flex items-center gap-3">
                <input
                  type="radio"
                  name={`q${idx}`}
                  checked={ans[idx] === ci}
                  onChange={() => setAns((a) => a.map((v, i) => (i === idx ? ci : v)))}
                />
                <span>{c}</span>
              </label>
            ))}
          </div>
        </Card>
      ))}
      {!done ? (
        <Button onClick={() => setDone(true)} className="bg-indigo-600 text-white font-semibold">‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</Button>
      ) : (
        <Card className="text-center">
          <div className="text-2xl font-bold">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {correct} / {QUESTIONS.length}</div>
          <p className="text-gray-600 mt-2">{correct >= QUESTIONS.length * 0.7 ? "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å!" : "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ"}</p>
          <div className="mt-4 grid gap-3">
            <Button onClick={onDone} className="bg-emerald-600 text-white">‡πÑ‡∏õ‡∏ï‡πà‡∏≠ ‚Üí</Button>
            <Button onClick={() => { setAns(Array(QUESTIONS.length).fill(null)); setDone(false); }} className="bg-white">‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà</Button>
          </div>
        </Card>
      )}
    </div>
  );
}

function ClipsPage({ openClip }) {
  const items = new Array(6).fill(0).map((_, i) => ({ title: `‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà ${i + 1}`, desc: i % 2 === 0 ? "‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠ ‡∏ö‡πà‡∏≤ ‡∏™‡∏∞‡∏ö‡∏±‡∏Å" : "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏á" }));
  return (
    <div className="space-y-4">
      <h2 className="text-xl font-bold">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏•‡∏¥‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</h2>
      <div className="grid gap-4" style={{gridTemplateColumns: "repeat(auto-fill, minmax(260px, 1fr))"}}>
        {items.map((it, idx) => (
          <Card key={idx}>
            <div className="flex items-start justify-between gap-3">
              <div>
                <div className="font-semibold">{it.title}</div>
                <div className="text-gray-600 text-sm">{it.desc}</div>
                <div className="mt-2" style={{display:'flex', gap:'.5rem', flexWrap:'wrap'}}>
                  <Chip>BEGINNER</Chip>
                  <Chip>3‚Äì5 ‡∏ô‡∏≤‡∏ó‡∏µ</Chip>
                </div>
              </div>
              <Button onClick={openClip} className="bg-indigo-600 text-white w-auto">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Button>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
}

function ClipDetailPage({ onNext }) {
  return (
    <div className="space-y-4">
      <Card>
        <h3 className="font-semibold text-lg mb-2">‡∏Ñ‡∏•‡∏¥‡∏õ: ‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á</h3>
        <ul className="list-disc pl-6 text-gray-700 space-y-1">
          <li><b>‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á:</b> 2‚Äì3 ‡πÄ‡∏ã‡∏ï ‡πÄ‡∏ã‡∏ï‡∏•‡∏∞ 8‚Äì12 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏•‡∏∞ 20‚Äì40 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
          <li><b>‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏£:</b> ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡πà‡∏ô/‡∏á‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏•‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡πÑ‡∏´‡∏•‡πà‡∏¢‡∏Å‡∏ï‡∏∂‡∏á</li>
          <li><b>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:</b> ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥) ‚Äî ‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á</li>
        </ul>
      </Card>
      <Button onClick={onNext} className="bg-emerald-600 text-white font-semibold">‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‚Üí</Button>
    </div>
  );
}

function TipsPage({ onNext }) {
  const tips = ["‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ", "‡∏Å‡∏¥‡∏ô‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠", "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏≠"];
  return (
    <Card>
      <h3 className="font-semibold text-lg mb-3">‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
      <ul className="list-disc pl-6 text-gray-700 space-y-1">
        {tips.map((t) => (<li key={t}>{t}</li>))}
      </ul>
      <div className="mt-4">
        <Button onClick={onNext} className="bg-indigo-600 text-white">‡πÑ‡∏õ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‚Üí</Button>
      </div>
    </Card>
  );
}

function SurveyPage({ studentName }) {
  const [rate, setRate] = useState(0);
  const [fb, setFb] = useState("");
  const hearts = [1,2,3,4,5];
  return (
    <Card>
      <h3 className="font-semibold text-lg mb-3">‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</h3>
      <div className="mb-4">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ{studentName ? ` ${studentName}` : " ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"} ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</div>
      <div className="flex gap-2 text-3xl">
        {hearts.map((h) => (
          <button key={h} onClick={() => setRate(h)} aria-label={`‡πÉ‡∏´‡πâ ${h} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`}>
            <span style={{opacity: h <= rate ? 1 : .3}}>‚ù§Ô∏è</span>
          </button>
        ))}
      </div>
      <div className="mt-4 grid gap-2">
        <label className="text-sm text-gray-600">‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
        <textarea value={fb} onChange={(e) => setFb(e.target.value)} rows={4} className="w-full rounded-xl border px-4 py-3" placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà" />
      </div>
      <div className="mt-4 grid gap-3" style={{gridTemplateColumns:'repeat(auto-fit, minmax(180px,1fr))'}}>
        <Button onClick={() => alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞") } className="bg-emerald-600 text-white">‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</Button>
        <Button onClick={() => window.print()} className="bg-white">‡∏û‡∏¥‡∏°‡∏û‡πå/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF</Button>
      </div>
    </Card>
  );
}

function SummaryPage({ go }) {
  return (
    <Card>
      <h3 className="font-semibold text-lg mb-2">‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</h3>
      <ul className="list-disc pl-6 text-gray-700 space-y-1">
        <li>‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß</li>
        <li>‡∏ù‡∏∂‡∏Å‡∏ó‡πà‡∏≤‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ</li>
        <li>‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß</li>
      </ul>
      <div className="mt-4 grid gap-3" style={{gridTemplateColumns:'repeat(auto-fit, minmax(180px,1fr))'}}>
        <Button onClick={() => go("survey")} className="bg-indigo-600 text-white">‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</Button>
        <Button onClick={() => go("home")} className="bg-white">‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Button>
      </div>
    </Card>
  );
}
